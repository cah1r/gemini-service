plugins {
	id 'groovy'
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.sonarqube" version "5.1.0.4882"
	id 'jacoco'
}

group = 'dev.cah1r'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.0'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.springframework.boot:spring-boot-docker-compose'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.session:spring-session-jdbc'

	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testRuntimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.springframework.security:spring-security-test'

	testImplementation 'org.apache.groovy:groovy-all:4.0.22'
	testImplementation 'org.spockframework:spock-core:2.4-M4-groovy-4.0'
	testImplementation 'org.spockframework:spock-spring:2.4-M4-groovy-4.0'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, exclude: ['dev/cah1r/config/*'])
				})
		)
	}
}

test {
	jvmArgs '-XX:+EnableDynamicAgentLoading'
}

sonarqube {
	properties {
		property "sonar.projectKey", System.getenv("SONAR_PROJECT_KEY")
		property "sonar.organization", System.getenv("SONAR_ORG_KEY")
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.exclusions", "**/dev/cah1r/geminiservice/config/*"
	}
}
